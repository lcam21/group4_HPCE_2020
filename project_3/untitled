Memory optimization
	BlockSize -> move to uint8_t
	P2 -> move to uint8_t
	NumDir -> move to uint8_t
	Cmax -> keep same uint16_t

FUntion to optimize:

	compute_census_transform *
		-> 4 FOR

	compute_hamming -> DONE
		-> 3 FOR
		-> compute_hamming_distance *
			-> 1 FOR
			
	compute_SGM
		-> init_Lr
			-> 2 FOR
		-> cost_computation
			-> 4 FOR
			-> find_min
			-> find_minLri * -> It is a reduction, looks the minimal value, so using openmp doesn't give a improve
				-> 1 FOR
		-> cost_aggregation *
			-> 4 FOR
		-> calc_disp
			-> 3 FOR


compute_census_transform
	-> 4 FOR
	-> No paraleliza
	
compute_hamming_distance
	-> 1 FOR
	-> Paraleliza pero incrementa el tiempo 
	
*compute_hamming	
	-> 3 FOR
	-> No paraleliza, mejora el tiempo un poco
	
init_Lr
	-> 2 FOR
	-> No paraleliza

find_minLri
	-> 1 FOR
	-> Paraleliza pero incrementa el tiempo 
	
*cost_computation
	-> 4 FOR
	-> Paraleliza, mejora el tiempo, resultado no optimo
	
*cost_aggregation
	-> 4 FOR
	-> No paraleliza, mejora el tiempo un poco
	
saveDisparityMap
	-> 2 FOR
	-> No paraleliza, mejora el tiempo un poco
	
calc_disp
	-> 2 FOR
	-> No paraleliza, mejora el tiempo un poco
	
	
	
	
