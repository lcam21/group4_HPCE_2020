luis@luis-K53E:~/Documents$ valgrind ./case2
==8956== Memcheck, a memory error detector
==8956== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8956== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8956== Command: ./case2
==8956== 
==8956== Conditional jump or move depends on uninitialised value(s)
==8956==    at 0x4E988DA: vfprintf (vfprintf.c:1642)
==8956==    by 0x4EA0F25: printf (printf.c:33)
==8956==    by 0x10875B: main (case2.c:11)
==8956== 
==8956== Use of uninitialised value of size 8
==8956==    at 0x4E9486B: _itoa_word (_itoa.c:179)
==8956==    by 0x4E97F0D: vfprintf (vfprintf.c:1642)
==8956==    by 0x4EA0F25: printf (printf.c:33)
==8956==    by 0x10875B: main (case2.c:11)
==8956== 
==8956== Conditional jump or move depends on uninitialised value(s)
==8956==    at 0x4E94875: _itoa_word (_itoa.c:179)
==8956==    by 0x4E97F0D: vfprintf (vfprintf.c:1642)
==8956==    by 0x4EA0F25: printf (printf.c:33)
==8956==    by 0x10875B: main (case2.c:11)
==8956== 
==8956== Conditional jump or move depends on uninitialised value(s)
==8956==    at 0x4E98014: vfprintf (vfprintf.c:1642)
==8956==    by 0x4EA0F25: printf (printf.c:33)
==8956==    by 0x10875B: main (case2.c:11)
==8956== 
==8956== Conditional jump or move depends on uninitialised value(s)
==8956==    at 0x4E98B4C: vfprintf (vfprintf.c:1642)
==8956==    by 0x4EA0F25: printf (printf.c:33)
==8956==    by 0x10875B: main (case2.c:11)
==8956== 
0 1 2 3 4 5 6 7 8 31 
==8956== 
==8956== HEAP SUMMARY:
==8956==     in use at exit: 0 bytes in 0 blocks
==8956==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==8956== 
==8956== All heap blocks were freed -- no leaks are possible
==8956== 
==8956== For counts of detected and suppressed errors, rerun with: -v
==8956== Use --track-origins=yes to see where uninitialised values come from
==8956== ERROR SUMMARY: 7 errors from 5 contexts (suppressed: 0 from 0)



Discusion de los errores:

Como se observa en el codigo case2.c no se realiza ninguna inicializacion de memoria para ninguna de las variables utilizadas en el codigor. Esto es lo que esta generando los errores de jump ni de uninitialised. Se deben inicializar los espacios de memoria para la variable "a" e "i". Es por eso quese observa un error de asignacion de 8 Bytes, ya que ambas son enteros.
